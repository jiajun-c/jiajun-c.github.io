<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HalfStar</title>
  
  <subtitle>coding, traveling and gym</subtitle>
  <link href="http://www.halfstar.top/atom.xml" rel="self"/>
  
  <link href="http://www.halfstar.top/"/>
  <updated>2022-03-02T14:30:17.702Z</updated>
  <id>http://www.halfstar.top/</id>
  
  <author>
    <name>jiajun-c</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gdb.md</title>
    <link href="http://www.halfstar.top/2022/03/02/gdb/"/>
    <id>http://www.halfstar.top/2022/03/02/gdb/</id>
    <published>2022-03-02T13:17:03.000Z</published>
    <updated>2022-03-02T14:30:17.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GDB-调试"><a href="#GDB-调试" class="headerlink" title="GDB 调试"></a>GDB 调试</h1><h2 id="0-pre-work"><a href="#0-pre-work" class="headerlink" title="0. pre work"></a>0. pre work</h2><p>在一些文章中看到需要在编译的时候加入-g的参数才能进行调试<br>加入gdb参数的编译指令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -o hello hello.c </span><br></pre></td></tr></table></figure><h3 id="0-1-check-file"><a href="#0-1-check-file" class="headerlink" title="0.1 check file"></a>0.1 check file</h3><p>我们可以使用readelf对<a href="./wiki/ELF.md">elf</a>文件进行查看,使用grep我们可以抓取到我们想要的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="language-bash">linux readelf -S hello|grep plt</span>  </span><br><span class="line">  [11] .rela.plt         RELA             0000000000000608  00000608</span><br><span class="line">  [13] .plt              PROGBITS         0000000000001020  00001020</span><br><span class="line">  [14] .plt.got          PROGBITS         0000000000001050  00001050</span><br><span class="line">  [15] .plt.sec          PROGBITS         0000000000001060  00001060</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译产生可执行文件后对其进行调试<br>按道理说到这里我们已经可以看出这个程序是否是可以调试的，但是原文的作者还教会了我们另外一种方式<br><code>file hello|grep strip</code><br>在得到的信息中如果显示not stripped说明调试相关的信息没有被抹除，还保存在文件中，否则不能进行调试</p><h2 id="1-Start-debug"><a href="#1-Start-debug" class="headerlink" title="1 Start debug"></a>1 Start debug</h2><p>首先让我们写一个helloworld</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> &gt;= argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;usage:hello name\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World %s!\n&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照上文所说启动调试之后就可以start了</p><h3 id="1-1-Run"><a href="#1-1-Run" class="headerlink" title="1.1 Run"></a>1.1 Run</h3><p>run的基本用法和我们平时执行是差不多的，在提供了arg的情况下可以直接使用run + args的形式进行运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /home/chengjiajun/note/csapp/code/hello </span><br><span class="line">usage:hello name</span><br><span class="line">[Inferior 1 (process 48755) exited normally]</span><br><span class="line">(gdb) run A</span><br><span class="line">Starting program: /home/chengjiajun/note/csapp/code/hello A</span><br><span class="line">Hello World A!</span><br><span class="line">[Inferior 1 (process 48775) exited normally]</span><br><span class="line">gdb hello </span><br></pre></td></tr></table></figure><p>也可以提前设置好arg的参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(gdb) set args SSR</span><br><span class="line">(gdb) run</span><br><span class="line">Starting program: /home/chengjiajun/note/csapp/code/hello SSR</span><br><span class="line">Hello World SSR!</span><br><span class="line">[Inferior 1 (process 48831) exited normally]</span><br></pre></td></tr></table></figure><h3 id="1-2-调试core文件"><a href="#1-2-调试core文件" class="headerlink" title="1.2 调试core文件"></a>1.2 调试core文件</h3><p>当我们在机器中执行<code>ulimit -c</code> 可以查看系统是否对core文件的产生进行限制<br>如果结果为0，那么当程序结束的时候也不会有core文件产生。<br>此时我们需要进行如下的设置<br><a href="https://www.yanbinghu.com/2018/09/26/61877.html">对core的调试waiting</a></p><h2 id="2-断点调试"><a href="#2-断点调试" class="headerlink" title="2 断点调试"></a>2 断点调试</h2><h3 id="2-1-查看已经存在的断点"><a href="#2-1-查看已经存在的断点" class="headerlink" title="2.1 查看已经存在的断点"></a>2.1 查看已经存在的断点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info breakpoints</span><br></pre></td></tr></table></figure><h3 id="2-2-设置断点"><a href="#2-2-设置断点" class="headerlink" title="2.2 设置断点"></a>2.2 设置断点</h3><h4 id="2-2-1-在第i行设置一个断点"><a href="#2-2-1-在第i行设置一个断点" class="headerlink" title="2.2.1 在第i行设置一个断点"></a>2.2.1 在第i行设置一个断点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b 9 </span><br></pre></td></tr></table></figure><h4 id="2-2-2-为一个函数设置一个断点"><a href="#2-2-2-为一个函数设置一个断点" class="headerlink" title="2.2.2 为一个函数设置一个断点"></a>2.2.2 为一个函数设置一个断点</h4><p>b [function name] 实现了在函数执行处设置断点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb)b add </span><br></pre></td></tr></table></figure><h4 id="2-2-3-根据条件设置断点"><a href="#2-2-3-根据条件设置断点" class="headerlink" title="2.2.3 根据条件设置断点"></a>2.2.3 根据条件设置断点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b 10 if x==11</span><br><span class="line">Note: breakpoint 3 also set at pc 0x1194.</span><br><span class="line">Breakpoint 4 at 0x1194: file hello.c, line 10.</span><br><span class="line">(gdb) info breakpoints </span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x0000000000001149 in add at hello.c:2</span><br><span class="line">2       breakpoint     keep y   0x0000000000001161 in add at hello.c:4</span><br><span class="line">3       breakpoint     keep y   0x0000000000001194 in main at hello.c:10</span><br><span class="line">4       breakpoint     keep y   0x0000000000001194 in main at hello.c:10</span><br><span class="line">stop only if x==11</span><br></pre></td></tr></table></figure><h4 id="2-2-4-根据规则设置断点"><a href="#2-2-4-根据规则设置断点" class="headerlink" title="2.2.4 根据规则设置断点"></a>2.2.4 根据规则设置断点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbreak printNum*</span><br></pre></td></tr></table></figure><p>这样就可以在所有符合规则的地方设置断点</p><p>其他断点的设置方式参考 <a href="https://www.yanbinghu.com/2019/04/20/41283.html">link</a></p><h3 id="2-3-清除断点"><a href="#2-3-清除断点" class="headerlink" title="2.3 清除断点"></a>2.3 清除断点</h3><h4 id="禁用或启用断点"><a href="#禁用或启用断点" class="headerlink" title="禁用或启用断点"></a>禁用或启用断点</h4><p>如果加入了编号，就说明是对某一个断点进行操作，如果不仅爱如数字，就说明是对所有的断点进行的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb)disable bnum </span><br><span class="line">(gdb)endable bnum </span><br></pre></td></tr></table></figure><h4 id="断点的清除"><a href="#断点的清除" class="headerlink" title="断点的清除"></a>断点的清除</h4><p>clear + linenum&#x2F;function name&#x2F;filename: function name </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) clear add</span><br><span class="line"></span><br><span class="line">(gdb) info breakpoints </span><br><span class="line">Deleted breakpoint 1 No breakpoints or watchpoints.</span><br><span class="line">(gdb) info breakpoints </span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">2       breakpoint     keep y   0x000000000000115b in add at hello.c:3</span><br><span class="line">(gdb) d 2</span><br><span class="line">(gdb) info breakpoints </span><br><span class="line">No breakpoints or watchpoints</span><br></pre></td></tr></table></figure><h2 id="3-变量查看"><a href="#3-变量查看" class="headerlink" title="3.变量查看"></a>3.变量查看</h2><h3 id="普通变量的查看"><a href="#普通变量的查看" class="headerlink" title="普通变量的查看"></a>普通变量的查看</h3><p>准备好之前的调试工具后，在相应的位置设置断点，然后在该位置程序会停下<br>此时<code>p varname</code>可以显示变量的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint <span class="number">4</span>, main (argc=<span class="number">1</span>, argv=<span class="number">0x7fffffffde58</span>) at hello.c:<span class="number">10</span></span><br><span class="line"><span class="number">10</span>    x += <span class="number">1</span>;</span><br><span class="line">(gdb) p <span class="number">4</span></span><br><span class="line">$<span class="number">2</span> = <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="指针-x2F-数组的查看"><a href="#指针-x2F-数组的查看" class="headerlink" title="指针&#x2F;数组的查看"></a>指针&#x2F;数组的查看</h3><p>如果你直接p pointname， 得到的将是地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p p1</span><br><span class="line"><span class="meta">$</span><span class="language-bash">6 = (int *) 0x55555555527d &lt;__libc_csu_init+77&gt;</span></span><br></pre></td></tr></table></figure><p>想要打印数组的名字，必须使用<code>p *pointname</code>（只打印第一个数字）<br>如果想要限定输出的数字，则需要<code>p *pointname@num</code> (将会打印数组中的前num个元素<br>)</p><blockquote><p>其中值得注意的一点是我们的数组名和指针其实是不同的，在gdb的打印中打印一个数组名输出的是整个数组，而打印指针输出的是地址，数组名是一种直接的访问，是真实的地址，但是对于我们的指针而言，得到的将是一个地址，运行这个地址我们可以得到真实内存所在的地方。</p></blockquote><h3 id="设置我们自己的变量"><a href="#设置我们自己的变量" class="headerlink" title="设置我们自己的变量"></a>设置我们自己的变量</h3><p>在调试的过程中，我们可以通过set指令去设置一个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(gdb) set $index = 1</span><br><span class="line">(gdb) $index</span><br><span class="line">Undefined command: &quot;$index&quot;.  Try &quot;help&quot;.</span><br><span class="line">(gdb) index</span><br><span class="line">Undefined command: &quot;index&quot;.  Try &quot;help&quot;.</span><br><span class="line">(gdb) p y[$index]</span><br><span class="line"><span class="meta">$</span><span class="language-bash">10 = 2</span></span><br><span class="line">(gdb) $index++</span><br><span class="line">Undefined command: &quot;$index++&quot;.  Try &quot;help&quot;.</span><br><span class="line">(gdb) index++</span><br><span class="line">Undefined command: &quot;index++&quot;.  Try &quot;help&quot;.</span><br><span class="line">(gdb) p y[$index++]</span><br><span class="line"><span class="meta">$</span><span class="language-bash">11 = 2</span></span><br><span class="line">(gdb) p y[$index]</span><br><span class="line"><span class="meta">$</span><span class="language-bash">12 = 3</span></span><br></pre></td></tr></table></figure><h3 id="进行函数的调试"><a href="#进行函数的调试" class="headerlink" title="进行函数的调试"></a>进行函数的调试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> y = <span class="number">2</span>;</span><br><span class="line">  add(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> &#123;</span><br><span class="line">  x += y;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用上面的代码作为例子<br>在对函数进行调试的时候，我们需要在函数中设置断点，然后在调用处使用<code>step</code>指令进入该函数的主体中。<br>If we use the <code>stepi</code>,it will go in the machine code </p><h3 id="调试中的跳转"><a href="#调试中的跳转" class="headerlink" title="调试中的跳转"></a>调试中的跳转</h3><table><thead><tr><th>command</th><th>role</th></tr></thead><tbody><tr><td>continue</td><td>go to the next breakpoint</td></tr><tr><td>until</td><td>go to the specific line</td></tr></tbody></table><h3 id="监控变量的变化"><a href="#监控变量的变化" class="headerlink" title="监控变量的变化"></a>监控变量的变化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb) wathc varname</span><br></pre></td></tr></table></figure><p>每次变量有变化的时候程序都会停止执行</p>]]></content>
    
    
    <summary type="html">start debug in the linux</summary>
    
    
    
    <category term="linux" scheme="http://www.halfstar.top/categories/linux/"/>
    
    
    <category term="gdb" scheme="http://www.halfstar.top/tags/gdb/"/>
    
    <category term="debug" scheme="http://www.halfstar.top/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>csapp</title>
    <link href="http://www.halfstar.top/2022/03/02/csapp/"/>
    <id>http://www.halfstar.top/2022/03/02/csapp/</id>
    <published>2022-03-02T12:08:16.000Z</published>
    <updated>2022-03-02T13:45:28.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Data-lab"><a href="#Data-lab" class="headerlink" title="Data lab"></a>Data lab</h1><p><img src="/imgs/eyww.jpg" alt="img1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Data-lab&quot;&gt;&lt;a href=&quot;#Data-lab&quot; class=&quot;headerlink&quot; title=&quot;Data lab&quot;&gt;&lt;/a&gt;Data lab&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/imgs/eyww.jpg&quot; alt=&quot;img1&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="lab" scheme="http://www.halfstar.top/categories/lab/"/>
    
    
    <category term="linux" scheme="http://www.halfstar.top/tags/linux/"/>
    
    <category term="cs" scheme="http://www.halfstar.top/tags/cs/"/>
    
  </entry>
  
</feed>
